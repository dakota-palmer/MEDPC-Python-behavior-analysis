# -*- coding: utf-8 -*-
"""
Created on Mon Aug 16 12:01:47 2021

@author: Dakota
"""
#%% import dependencies
import pandas as pd
import glob
import os
import numpy as np
import shelve

#%% About:

#this script will load your medpc data from spreadsheets generated by the mpctoexcel python package.
#it will also associate this data with 1) subject and 2) session metadata from spreadsheets manually created by you.
#data is imported and put into a pandas dataframe, df
#the dataframe is then "tidied" so that each column is one variable and each row is an observation (one observation=1 event timestamp)
#result is the dataframe dfTidy

#hierarchical data structure (subject, session, trial, event) is retained using labels for each event  

#finally, dfTidy is exported as .csv so it can be rapidly loaded later on without running this script.

# TODO: consider alternative organization like 'epoch' labels (e.g. DS, NS, in port, laser on, etc) 

#%% Things to manually change based on your data:
    
#datapath= path to your folder containing excel files

#colToImport= columns in your excel sheets to include (manually defined this so that I could exclude a specific variable that was huge)

#metapath= paths to 1) subject metadata spreadsheet (e.g. virus type, sex) and 2) session metadata spreadsheet (e.g. laser parameters, DREADD manipulations)
#excludeDate= specific date you might want to exclude

#eventVars= event type labels for recorded timestamps
#idVars=  subject & session metadata labels for recorded timestamps 

#experimentType= just a gate now for opto-specific code. = 'Opto' for opto specific code
experimentType= 'Opto'

#%% ID and import raw data .xlsx
# your path to folder containing excel files 
datapath = r'C:\Users\Dakota\Desktop\Opto DS Task Test- Laser Manipulation\_dataRaw\\'


# set all .xls files in your folder to list
allfiles = glob.glob(datapath + "*.xls*")

#initialize list to store data from each file
dfRaw = pd.DataFrame()

#define columns in your .xlsx for specific variables you want (e.g. A:Z for all)
colToImport= 'F:S,U:X'

#for loop to aquire all excel files in folder
for excelfiles in allfiles:
    #read all sheets by specifying sheet_name = None
    #Remove any variables you don't want now before appending!
    #there was an issue with (W)trialState so leaving that out (col T)
    #Also leaving out first few columns
    raw_excel = pd.read_excel(excelfiles, sheet_name= None, usecols=colToImport)
    
    dfRaw = dfRaw.append(raw_excel, ignore_index=True)
    
#dfRaw is now nested df, each column is a subject and each row is a session

#eliminate data from 'MSNs' sheets for now, not informative currently
#TODO: this could be nice to get, but requires changing the mpc2excel scripts
dfRaw.drop('MSNs',axis=1,inplace=True)

#loop through nested df and append data. Now we have all data in one df
df= pd.DataFrame()

for subject in dfRaw.columns:
    print('loading'+subject)
    for file in range(len(dfRaw)):
        # print(allfiles[file]+subject)
        
        #add file label to each nested raw_excel before appending
        #assume fileName is yyyymmdd.xlsx (total of 13 characters at end of path. 5 are '.xlsx')
        dfRaw.loc[file,subject]['file']=allfiles[file][-13:]
        
        #add date too
        dfRaw.loc[file,subject]['date']= allfiles[file][-13:-5]
        
        
        #add subject label before appending
        dfRaw.loc[file,subject]['subject']=subject
        
        df= df.append(dfRaw.loc[file,subject])

#%% ID and import metadata .xlsx
#TODO: for now assuming separate excel files for these data

#convert subject and date variables to string datatype to ensure easy matching (excel number formatting can be weird)
df.subject= df.subject.astype('str')
df.date= df.date.astype('str')

# Match and insert subject metadata based on subject
metaPath= r"C:\Users\Dakota\Desktop\Opto DS Task Test- Laser Manipulation\_metadata\vp-vta-stgtacr_subj_metadata.xlsx"

dfRaw= pd.read_excel(metaPath).astype('str') 

df= df.merge(dfRaw.astype('str'), how='left', on=['subject'])

# Match and insert session metadata based on date and subject

metaPath= r"C:\Users\Dakota\Desktop\Opto DS Task Test- Laser Manipulation\_metadata\vp-vta-stgtacr_session_metadata.xlsx"

dfRaw= pd.read_excel(metaPath).astype('str') 

df= df.merge(dfRaw.astype('str'), how='left', on=['subject','date'])


# %% Exclude data

excludeDate= ['20210604']

# Exclude specific date(s)
df= df[~df.date.isin(excludeDate)]


# %% Remove parentheses from variable names 

import re
#use regex to replace text between () with empty string
#loop through each column name, remove characters between () and collect into list 'labels'
labels= []
for col in df.columns:
    labels.append(re.sub(r" ?\([^)]+\)", "", col))
#rename columns to labels
df.columns= labels

#%% Add unique fileID for each session (subject & date )

df.loc[:,'fileID'] = df.groupby(['date', 'subject']).ngroup()

# %% Add other variables if necessary before tidying

# calculate port exit time estimate using PEtime and peDur, save this as a new variable
df = df.assign(PExEst=df.PEtime + df.PEdur)

# save cue duration (in DS task this is A(2))
#TODO: may be better to put this in session metadata.xlsx? just to keep things parallel with photometry TDT data analysis (assume we won't import MPC as well)

#group by fileID then retrieve the 2nd value in stageParams
grouped= df.groupby('fileID')

df.loc[:,'cueDur']= grouped.stageParams.transform('nth',2)



#%% Define Event variables for your experiment 
#make a list of all of the Event Types so that we can melt them together into one variable
#instead of one column for each event's timestamps, will get one single column for timestamps and another single column for the eventType label

#these should match the labels in your .MPC file

#e.g. for DS task with Opto
eventVars= ['PEtime', 'PExEst', 'lickTime', 'laserTime', 'DStime', 'NStime', 'UStime','laserOffTime']

## e.g. for DS task with no Opto  
# eventVars= ['PEtime', 'PExEst', 'lickTime', 'DStime', 'NStime', 'UStime']

#%% Define ID variables for your sessions
#these are identifying variables per sessions that should be matched up with the corresponding event variables and timestamps
#they should variables in your session and subject metadata spreadsheets

#e.g. for DS task with Opto
idVars= ['fileID','subject', 'RatID', 'Virus', 'Sex', 'date', 'cueDur', 'laserDur', 'note']

## e.g. for DS task with no Opto
# idVars= ['fileID','subject', 'RatID', 'Virus', 'Sex', 'date', 'cueDur', 'note']

#%% Define Trial variables for your experiment
# If you have variables corresponding to each individual trial 
#e.g. different trial types in addition to DS vs NS (e.g. laser ON vs laser OFF trials; TODO: variable reward outcome)

#e.g. for Opto:
if experimentType=='Opto':
    trialVars= ['laserDStrial','laserNStrial']
    #the laserDStrial and laserNS trial variables will later be melted() into a new variable called 'laserState' with their values


#%% Change dtypes of variables if necessary (might help with grouping & calculations later on)

#binary coded 0/1 laser variables were being imported as floats, converting them to pandas dtype Int64 which supports NA values
if experimentType=='Opto':
    df.loc[:,(trialVars)]= df.loc[:,(trialVars)].astype('Int64')

#%% Tidying: All events in single column, add trialID and trialType that matches trial 1-60 through each session.

#First, am melting columns of behavioral events into single column of event label and column of individual timestamps (value_vars= want to melt)
dfEventAll = df.melt(id_vars=idVars, value_vars=eventVars, var_name='eventType', value_name='eventTime') #, ignore_index=False)

#Remove all rows with NaN eventTimes (these are just placeholders, not valid observations) 
dfEventAll= dfEventAll[dfEventAll.eventTime.notna()]

# remove invalid/placeholder 0s
# TODO: seem to be removing legitimate port exits with peDur==0, not sure how to deal with this so just excluding
dfEventAll = dfEventAll[dfEventAll.eventTime != 0]

# add trialID column by cumulative counting each DS or NS within each file
# now we have ID for trials 0-59 matching DS or NS within each session, nan for other events
dfEventAll['trialID'] = dfEventAll[(dfEventAll.eventType == 'DStime') | (
    dfEventAll.eventType == 'NStime')].groupby('fileID').cumcount()

#add trialType label using eventType (which will be DS or NS for valid trialIDs)
dfEventAll['trialType']= dfEventAll[dfEventAll.trialID.notna()].eventType

#%% Assign more specific trialTypes based on trialVars (OPTO ONLY specific for now)
if experimentType=='Opto':
    # melt() trialVars, get trialID for each trial and use this to merge label back to df 
    dfTrial = df.melt(id_vars= idVars, value_vars=trialVars, var_name='laserType', value_name='laserState')#, ignore_index=False)
    #remove nan placeholders
    dfTrial= dfTrial[dfTrial.laserState.notna()]
    
    #get trialID
    dfTrial['trialID'] = dfTrial.groupby('fileID').cumcount() 
    
    #merge trialType data back into df on matching fileID & trialID
    dfEventAll= dfEventAll.merge(dfTrial[['trialID', 'fileID', 'laserType', 'laserState']], on=[
        'fileID', 'trialID'], how='left')#.drop('trialID', axis=1)
    
    #combine laserState and laserType into one variable for labelling each trial: trialType
    #Exclude the Lick-paired laser sessions. We will label those using a different method below  
    dfEventAll.loc[dfEventAll.laserDur!='Lick', 'trialType'] = dfEventAll.laserType + \
        '_'+dfEventAll.laserState.astype(str).copy()
    
    #now drop redundant columns
    # dfEventAll= dfEventAll.drop(['laserType','laserState'], axis=1)
     

#%% Sort events by chronological order within-file, correct trialID, and save as dfTidy
dfTidy = dfEventAll.sort_values(by=['fileID', 'eventTime'])

#drop old, unsorted eventID
dfTidy= dfTidy.reset_index(drop=True)
dfTidy.index.name= 'eventID'

#reset_index so we have new, sorted eventID in a column
dfTidy.reset_index(inplace=True)

#recompute trialID now that everything is sorted chronologically
dfTidy.trialID= dfTidy[dfTidy.trialID.notna()].groupby('fileID').cumcount()


#%% Add trialID & trialType labels to other events (events during trials and ITIs) 
 
# fill in intermediate trialID values... We have absolute trialIDs now for each Cue but other events have trialID=nan
# we can't tell for certain if events happened during a trial or ITI at this point but we do have all of the timestamps
# and we know the cue duration, so we can calculate and assign events to a trial using this.

# To start, fill in these values between each trialID as -trialID (could also use decimal like trial 1.5) between each actual Cue
# Get the values and index of nan trialIDs
# this returns a series of each nan trialID along with its index.
indNan = dfTidy.trialID[dfTidy.trialID.isnull()].copy()


#Need to group by file, otherwise the ffill method here will contaminate between files (events before trial 0 in fileB are filled as 59 from fileA)
# pandas has a function for this- groupby().ffill or .backfill or .fillna
# this fills nan trialID
dfTidy.trialID= dfTidy.groupby('fileID')['trialID'].fillna(method='ffill').copy()

#Add 1 to each trialID to avoid trialID==0. 
#Don't allow trialIDs=0, so we can avoid issues with -0 trialIDs later (-0 will equate to 0 and we don't want to mix them up)
dfTidy.trialID= dfTidy.trialID+1

# do the same for trialType
dfTidy.trialType= dfTidy.groupby('fileID')['trialType'].fillna(method='ffill').copy()


# now multiply previously nan trialIDs by -1 so we can set them apart from the valid trialIDs
dfTidy.loc[indNan.index, 'trialID'] = dfTidy.trialID[indNan.index].copy()*-1

#Fill nan trialIDs (first ITI) with a placeholder. Do this because groupby of trialID with nan will result in contamination between sessions
#don't know why this is, but I'm guessing if any index value==nan then the entire index likely collapses to nan
dfTidy.loc[dfTidy.trialID.isnull(),'trialID']= -0.5


# Can get a trial end time based on cue onset, then just check
# event times against this

dfTidy = dfTidy.sort_values(by=['fileID', 'eventTime']).copy()

dfTidy.loc[:, 'trialEnd'] = dfTidy.eventTime[dfTidy.trialID >= 0].copy() + \
    dfTidy.cueDur

dfTidy.loc[:, 'trialEnd'] = dfTidy.fillna(method='ffill').copy()

##TODO: for first ILI, make trial end the first cue onset
# dfTidy.loc[dfTidy.trialID== -0.5,'trialEnd']= dfTidy.loc[dfTidy.loc[dfTidy.trialID==1].groupby(['fileID','trialID'])['eventTime'].cumcount()==0]

# find events that occur after cue start but before cue duration end.
# multiply those trialIDs by -1 so that they match the corresponding cue.
# remaining events with negative trialIDs must have occurred somewhere in that ITI (or 'pre/post cue')

dfTidy.loc[(dfTidy.trialEnd-dfTidy.eventTime >= 0) & ((dfTidy.trialEnd -
                                                      dfTidy.eventTime).apply(np.round) < dfTidy.cueDur), 'trialID'] = dfTidy.trialID.copy()*-1

# remove trialType labels from events outside of cueDur (- trial ID or nan trialID)
# for now labelling with "ITI", but could be nan
dfTidy.loc[(dfTidy.trialID < 0) | (dfTidy.trialID.isnull()), 'trialType'] = 'ITI'

#%% for lick-paired laser sessions, classify trials as laser on vs. laser off
#since laser delivery in these sessions is contingent on lick behavior
#use actual laser on & off times to define trials where laser delivered
   
if experimentType== 'Opto': 
    #cumcount each laser onsets per trial
    dfTidy['trialLaser'] = dfTidy[(dfTidy.laserDur=='Lick') & (dfTidy.eventType == 'laserTime')].groupby([
        'fileID', 'trialID']).cumcount().copy()
    
    #relabel trialType based on presence or absence of laser onset
    laserCount= dfTidy[dfTidy.laserDur=='Lick'].groupby(['fileID','trialID'],dropna=False)['trialLaser'].nunique()
    
    #make 0 or 1 to match trialType labels of Cue laser sessions
    laserCount.loc[laserCount>0]='1' 
    laserCount.loc[laserCount==0]='0'
    
    #so  we have a laser state for each trial, but dfTidy has many entries for each trial.
    #get the first value, then we'll use ffill to fill in other entries later
    #using  reset_index() then set_index() keeps the original named index as a column
    
    laserCount= laserCount.loc[laserCount.index.get_level_values(1)>=0]
    
    ## index by file, trial and get total count of lasers onsets per trial
    #we will use this to match up values with the original dfTidy
    dfLaser= dfTidy[((dfTidy.laserDur=='Lick') & ((dfTidy.eventType=='DStime') | (dfTidy.eventType=='NStime')))].reset_index().set_index(['fileID','trialID'])
    
    # combine laserState and laserType into one variable for labelling each trial: trialType
    # #only include the laser sessions
    dfLaser.trialType= dfLaser.laserType + '_' + laserCount.astype(str).copy()
    
    #set index to eventID before assignment
    # dfLaser= dfLaser.reset_index().set_index('eventID')
    # dfLaser= dfLaser.set_index('fileID','trialID')s
    
    #index by fileID, trialID and overwrite previous trialType labels
    dfTidy.set_index(['fileID','trialID'],inplace=True)
    
    dfTidy.loc[dfLaser.index, 'trialType']= dfLaser.trialType
    
    dfTidy.reset_index(inplace=True)    

    #insert trialTypes using eventID as index
    
    #ffill trialType for each trial
    #already filled nan so fillna wont work
    # dfTidy.loc[dfTidy.trialID>=0,'trialType']= dfTidy[dfTidy.trialID>=0].groupby('fileID')['trialType'].fillna(method='ffill').copy()
    
    #%%  drop any redundant columns remaining
    if experimentType== 'Opto':
        dfTidy = dfTidy.drop(columns=['laserType', 'laserState']).copy()


#%% Save dfTidy so it can be loaded quickly for subesequent analysis

savePath= r'C:\Users\Dakota\Desktop\Opto DS Task Test- Laser Manipulation\_dataRaw'

savePath= r'C:\Users\Dakota\Documents\GitHub\DS-Training\Python'

savePath= './'

print('saving dfTidy to file')

#Save as pickel
dfTidy.to_pickle(savePath+'dfTidy.pkl')

#also save other variables e.g. eventVars, idVars, trialVars for later recall (without needing to run this script again)
# pickle.dump([idVars, eventVars, trialVars], savePath+'dfTidyMeta.pkl')

saveVars= ['idVars', 'eventVars', 'trialVars', 'experimentType']

#use shelve module to save variables as dict keys
my_shelf= shelve.open('dfTidyMeta', 'n') #start new file

for key in saveVars:
    try:
        my_shelf[key]= globals()[key] 
    except TypeError:
        #
        # __builtins__, my_shelf, and imported modules can not be shelved.
        #
        print('ERROR shelving: {0}'.format(key))
my_shelf.close()


#Could save as .csv, but should also save dtypes because they should be manually defined when imported
# dfTidy.to_csv('dfTidy.csv')




#%% Custom method of groupby subsetting, manipulations, and reassignment to df
#TODO: in progress...
#May be interchangable with groupby.transform() Call function producing a like-indexed DataFrame on each group and return a DataFrame having the same indexes as the original object filled with the transformed values
def groupbyCustom(df, grouper):
    #df= dataframe ; grouper= list of columns to groupby (e.g.) grouper= ['subject','date'] 
    
    grouped= df.groupby(grouper)
    
    #get the unique groups
    groups= grouped.groups
    
        
    #Each group in groups contains index of items belonging to said group
    #so we can loop through each group, use that as a key for the groups dict to get index
    #then retrieve or alter values as needed by group with this index using df.iloc  
    # dfGroup= pd.DataFrame()
    #initialize dfGroup as all nan copy of original df. Then we'll get values by group
    dfGroup= df.copy()
    dfGroup[:]= np.nan
    
    #collection using loop takes too long. would be nice to vectorize (need to find a way to use the dict int64 ind as index in df I think)
    for group in groups:
        #index corresponding to this group in the df
        groupInd= groups[group]
        
        #extract values from df
        dfGroup.loc[groupInd,:]= df.loc[groupInd,:]
        
        #add label for this group
        # dfGroup.loc[groupInd,'groupID']= [group]
        dfGroup.loc[groupInd,'groupID']= str(group)
        
    # for group in groups:
    #     #use key and get_group
    #     #this approach isolates values but loses original index
    #     dfGroup= grouped.get_group(group)

        #here you could run a function on dfGroup
        return dfGroup